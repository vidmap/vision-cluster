- name: "Basic ansible setup"
  hosts: gpu
  become: yes
  tasks:
    - name: "Remove obsolete ppas"
      apt_repository:
        repo: "{{item}}"
        state: absent
        update_cache: no
      with_items:
        - "ppa:kalakris/cmake"
        - "ppa:mc3man/trusty-media"

    - name: "Add aptitude needed by ansible"
      apt: name=aptitude

    - name: "Install https support for apt"
      apt: name=apt-transport-https

    - name: "Install python packaging and build-essential support"
      apt: name={{item}}
      with_items:
        - libssl-dev
        - build-essential
        - python-pip
        - python-dev
        - libffi-dev
        - checkinstall

    - name: "Update python ssl support"
      pip: name="cffi urllib3 pyopenssl ndg-httpsclient pyasn1"

    - name: "Update ca-certificates for https support"
      apt: name=ca-certificates

- name: "Update gcc"
  hosts: gpu
  become: yes
  tasks:
    - name: "Ensure gcc is updated"
      apt: name={{item}} state=present
      with_items:
        - gcc
        - g++

- name: "Install ansible"
  hosts: gpu
  become: yes
  tasks:
    - name: "Add ansible ppa"
      apt_repository:
        repo: "ppa:ansible/ansible"
        state: present
        update_cache: yes

    - name: "Install ansible itself"
      apt: name=ansible

- name: "Install useful packages"
  hosts: gpu
  become: yes
  tasks:
    - name: "Install various admin tools"
      apt: name={{item}}
      with_items:
        - htop
        - iotop
        - environment-modules
        - parallel
        - lshw
        - gdisk

    - name: "Install glances"
      pip:
        name:
          - "glances[gpu,web]"

    - name: "Update apt cache and do a full dist upgrade"
      apt: update_cache=yes upgrade=dist cache_valid_time=3600

- name: "Machine learning dependencies"
  hosts: gpu
  become: yes
  tasks:
    - name: "Add fortran opencv, gflags, lmdb, hdf5 support, etc."
      apt: name={{item}}
      with_items:
        - gfortran
        - libatlas-base-dev
        - libleveldb-dev
        - libsnappy-dev
        - libhdf5-serial-dev
        - libgflags-dev
        - libgoogle-glog-dev
        - liblmdb-dev
    - name: "Add boost library."
      apt: name=libboost-all-dev install_recommends=no

# Different versions of google protobuf are not binary-compatible,
# and different deep learning tools have different needs: while caffe
# is ok with the old protobuf packaged with ubuntu, tensorflow and
# andaconda want a very current protobuf.  So we upgrade to a recent
# protobuf that is far ahead of ubuntu by building directly from
# the google sources.
- name: "Build google protobuf 3.2 from source"
  hosts: gpu
  become: yes
  tasks:
    - name: "Check if protobuf 3.2 is present"
      command: dpkg-query -W libprotobuf12 libprotobuf-lite12 \
        libprotoc12 libprotobuf-dev libprotoc-dev protobuf-compiler \
      register: protobuf_check
      failed_when: protobuf_check.rc > 1
      changed_when: protobuf_check.rc == 1

    # If the old protoc is not removed now, the old package will think it
    # owns the new protoc and the new one will be deleted.
    - name: "Remove old protobuf implementation"
      apt: name={{item}} state=absent
      with_items:
        - libprotobuf-dev
        - libprotoc-dev
        - protobuf-compiler
      when: protobuf_check.rc == 1

    - name: "Eraes temp build directory"
      file: path=/tmp/ansible-proto-build state=absent
      when: protobuf_check.rc == 1

    - name: "Create temp build directory"
      file: path=/tmp/ansible-proto-build state=directory
      when: protobuf_check.rc == 1

    - name: "Download protobuf 3.2 sources"
      unarchive:
        src: "https://github.com/google/protobuf/releases/download/v3.2.0/protobuf-cpp-3.2.0.tar.gz"
        dest: /tmp/ansible-proto-build
        remote_src: yes
      when: protobuf_check.rc == 1

    - name: "Build and install protobuf"
      shell: |
        ./configure && make clean && make -j8 && \
        checkinstall --default --backup=no --deldoc=yes \
          --install=yes --pkgname=libprotobuf-dev --pkgversion='3.2.0'
      args:
        chdir: /tmp/ansible-proto-build/protobuf-3.2.0
      register: protobuf_build
      failed_when: protobuf_build.rc > 0
      when: protobuf_check.rc == 1

    - name: "Run ldconfig"
      command: ldconfig
      when: protobuf_check.rc == 1

    - name: "Verify protoc installation"
      command: /usr/local/bin/protoc --version
      register: protoc_test
      failed_when: '"3.2.0" not in protoc_test.stdout'
      when: protobuf_check.rc == 1

    - name: "Copy protobuf dummy deb files"
      copy:
        dest: /tmp/ansible-proto-build/
        src: files/protobuf/
      when: protobuf_check.rc == 1

    - name: "Install protobuf dummy deb files"
      apt: deb={{item}}
      with_items:
        - "/tmp/ansible-proto-build/libprotobuf12_3.2.0-0~dummy_amd64.deb"
        - "/tmp/ansible-proto-build/libprotobuf-lite12_3.2.0-0~dummy_amd64.deb"
        - "/tmp/ansible-proto-build/libprotoc12_3.2.0-0~dummy_amd64.deb"
        # - "/tmp/ansible-proto-build/libprotobuf-dev_3.2.0-0~dummy_amd64.deb"
        - "/tmp/ansible-proto-build/libprotoc-dev_3.2.0-0~dummy_amd64.deb"
        - "/tmp/ansible-proto-build/protobuf-compiler_3.2.0-0~dummy_amd64.deb"
      when: protobuf_check.rc == 1

- name: "Intel MKL library"
  hosts: gpu
  become: yes
  tasks:
    - name: "Add intel apt-key"
      apt_key:
        url: "https://apt.repos.intel.com/intel-gpg-keys/\
              GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB"

    - name: "Add intel mkl apt repository"
      apt_repository:
        repo: "deb https://apt.repos.intel.com/mkl all main"
        filename: "intel-mkl"
        update_cache: yes

    - name: "Install intel MKL libraries"
      apt: name="intel-mkl-64bit-2017.3-056"

    - name: "Add MKL library to ld.so.d path"
      copy:
        dest: /etc/ld.so.conf.d/mkl.conf
        src: files/mkl/mkl.conf
      notify:
        - run ldconfig

  handlers:
    - name: run ldconfig
      command: ldconfig


- name: "Nvidia CUDA library"
  hosts: gpu
  become: yes
  tasks:
    - name: "Check if CUDA is present"
      command: dpkg-query -W cuda
      register: cuda_check_deb
      failed_when: cuda_check_deb.rc > 1
      changed_when: cuda_check_deb.rc == 1

    - name: "Download CUDA repo deb"
      apt:
        deb: "https://developer.download.nvidia.com/compute/cuda/repos/\
              ubuntu1404/x86_64/cuda-repo-ubuntu1404_8.0.61-1_amd64.deb"
      when: cuda_check_deb.rc == 1

    - name: "Update apt-get cache"
      apt: update_cache=yes
      ignore_errors: yes
      when: cuda_check_deb.rc == 1

    - name: "Install CUDA drivers"
      apt: name=cuda
      when: cuda_check_deb.rc == 1

- name: "Nvidia CUDNN distribution"
  hosts: gpu
  become: yes
  tasks:
    - name: "Check if CUDNN is present"
      command: dpkg-query -W libcudnn5-dev libcudnn5 \
        libcudnn6-dev libcudnn6 libcudnn7-dev libcudnn7
      register: cudnn_check_deb
      failed_when: cudnn_check_deb.rc > 1
      changed_when: cudnn_check_deb.rc == 1

    - name: "Copy CUDNN deb files"
      copy:
        dest: /tmp/ansible-cudnn/
        src: largefiles/cudnn/trusty/
      when: cudnn_check_deb.rc == 1

    - name: "Install CUDNN runtime deb files"
      apt: deb={{item}}
      with_items:
        - "/tmp/ansible-cudnn/libcudnn5_5.1.10-1+cuda8.0_amd64.deb"
        - "/tmp/ansible-cudnn/libcudnn5-dev_5.1.10-1+cuda8.0_amd64.deb"
        - "/tmp/ansible-cudnn/libcudnn6_6.0.21-1+cuda8.0_amd64.deb"
        - "/tmp/ansible-cudnn/libcudnn6-dev_6.0.21-1+cuda8.0_amd64.deb"
        - "/tmp/ansible-cudnn/libcudnn7_7.0.1.13-1+cuda8.0_amd64.deb"
        - "/tmp/ansible-cudnn/libcudnn7-dev_7.0.1.13-1+cuda8.0_amd64.deb"
      when: cudnn_check_deb.rc == 1

- name: "python packages"
  hosts: gpu
  become: yes
  tasks:
    - name: "Install recent numpy"
      pip: name=numpy version=1.13.1
    - name: "Install recent scipy"
      pip: name=scipy version=0.19.1
    - name: "Install pycaffe prerequisites"
      pip: name={{item}}
      with_items:
        - scikit-image
        - matplotlib
        - ipython
        - h5py
        - leveldb
        - networkx
        - nose
        - pandas
        - python-dateutil
        - protobuf
        - python-gflags
        - pyyaml
        - Pillow
        - six

- name: "python3 packages"
  hosts: gpu
  become: yes
  tasks:
    - name: "Install pip3, python3-dev, and cffi"
      apt: name={{item}}
      with_items:
        - python3-pip
        - python3-dev
        - python3-cffi
    - name: "Install wheel"
      pip: executable=pip3 name=wheel
    - name: "Install recent numpy"
      pip: executable=pip3 name=numpy version=1.13.1
    - name: "Install recent scipy"
      pip: executable=pip3 name=scipy version=0.19.1
    - name: "Install pycaffe prerequisites"
      pip: executable=pip3 name={{item}}
      with_items:
        - scikit-image
        - matplotlib
        - ipython
        - h5py
        - leveldb
        - networkx
        - nose
        - pandas
        - python-dateutil
        - protobuf
        - python-gflags
        - pyyaml
        - Pillow
        - six

- name: "Build opencv from source"
  hosts: gpu
  become: true
  tasks:
    - name: "Check that if usr local libopencv_core.so.3.1.0 exists"
      stat: path=/usr/local/lib/libopencv_core.so.3.1.0
      register: libopencv_file

    - name: "Remove ubuntu opencv"
      apt: name={{item}} state=absent
      with_items:
        - libopencv-dev
        - libopencv-calib3d-dev
        - libopencv-calib3d2.4
        - libopencv-contrib-dev
        - libopencv-contrib2.4
        - libopencv-core-dev
        - libopencv-core2.4
        - libopencv-features2d-dev
        - libopencv-features2d2.4
        - libopencv-flann-dev
        - libopencv-flann2.4
        - libopencv-gpu-dev
        - libopencv-gpu2.4
        - libopencv-highgui-dev
        - libopencv-highgui2.4
        - libopencv-imgproc-dev
        - libopencv-imgproc2.4
        - libopencv-legacy-dev
        - libopencv-legacy2.4
        - libopencv-ml-dev
        - libopencv-ml2.4
        - libopencv-objdetect-dev
        - libopencv-objdetect2.4
        - libopencv-ocl-dev
        - libopencv-ocl2.4
        - libopencv-photo-dev
        - libopencv-photo2.4
        - libopencv-stitching-dev
        - libopencv-stitching2.4
        - libopencv-superres-dev
        - libopencv-superres2.4
        - libopencv-ts-dev
        - libopencv-ts2.4
        - libopencv-video-dev
        - libopencv-video2.4
        - libopencv-videostab-dev
        - libopencv-videostab2.4
        - libopencv2.4-java
        - libopencv2.4-jni
        - opencv-data
      when: not libopencv_file.stat.exists

    - name: "Install opencv prerequisite libraries"
      apt: name={{item}}
      with_items:
        - build-essential
        - cmake
        - ffmpeg
        - qtbase5-dev
        - libgtkglext1-dev
        - libvtk6-dev
        - zlib1g-dev
        - libjpeg-dev
        - libwebp-dev
        - libpng-dev
        - libtiff5-dev
        - libjasper-dev
        - libopenexr-dev
        - libgdal-dev
        - libdc1394-22-dev
        - libavcodec-dev
        - libavformat-dev
        - libswscale-dev
        - libtheora-dev
        - libvorbis-dev
        - libxvidcore-dev
        - libx264-dev
        - libgstreamer1.0-dev
        - libgstreamer-plugins-base1.0-dev
        - libfaac-dev
        - libmp3lame-dev
        - yasm
        - libopencore-amrnb-dev
        - libopencore-amrwb-dev
        - libv4l-dev
        - libxine2-dev
        - libtbb-dev
        - libeigen3-dev
        - python-tk
        - python3-tk
        - ant
        - default-jdk
        - doxygen
      # when: not libopencv_file.stat.exists

    - name: "Erase temp build directory"
      file: path=/tmp/ansible-opencv-build state=absent
      when: not libopencv_file.stat.exists

    - name: "Create temp build directory"
      file: path=/tmp/ansible-opencv-build state=directory
      when: not libopencv_file.stat.exists

    - name: "Download opencv 3.1 sources"
      git:
        repo: https://github.com/daveselinger/opencv
        version: 3.1.0-with-cuda8
        depth: 1
        dest: /tmp/ansible-opencv-build
      when: not libopencv_file.stat.exists

    - name: "Build and install opencv"
      shell: |
        mkdir build
        cd build
        cmake \
            -D CMAKE_BUILD_TYPE=RELEASE \
            -D FORCE_VTK=ON \
            -D WITH_TBB=ON \
            -D WITH_V4L=ON \
            -D WITH_QT=ON \
            -D WITH_OPENGL=ON \
            -D WITH_CUBLAS=ON \
            -D CUDA_NVCC_FLAGS="-D_FORCE_INLINES" \
            -D WITH_GDAL=ON \
            -D WITH_XINE=ON \
            -D WITH_GSTREAMER=ON \
            -D BUILD_NEW_PYTHON_SUPPORT=ON \
            -D BUILD_TESTS=OFF \
            -D BUILD_PERF_TESTS=OFF \
            -D BUILD_EXAMPLES=OFF ..
        make clean
        make -j12
        checkinstall --default --backup=no --deldoc=yes \
          --install=yes --pkgname=libopencv-dev --pkgversion='3.1.0'
      args:
        chdir: /tmp/ansible-opencv-build
      register: opencv_build
      failed_when: opencv_build.rc > 0
      when: not libopencv_file.stat.exists
      notify: run ldconfig

    - name: "Verify installation"
      stat: path=/usr/local/lib/libopencv_core.so.3.1.0
      register: libopencv_verify
      failed_when: not libopencv_verify.stat.exists

  handlers:
    - name: run ldconfig
      command: ldconfig


- name: "Shared Anaconda 3 distribution"
  hosts: gpu
  become: true
  vars:
    anaconda_version: 4.3.0
    anaconda_parent_dir: /opt/
    anaconda3_path: "/opt/Anaconda3-{{ anaconda_version }}-Linux-x86_64"
  pre_tasks:
    - name: Check if Anaconda 3 is already installed
      stat:
        path: "{{ anaconda3_path }}"
      register: anaconda3_installed
      tags:
        - anaconda-install
  roles:
    - role: andrewrothstein.anaconda
      anaconda_python_ver : '3'
      anaconda_ver: "{{ anaconda_version }}"
      when: not anaconda3_installed.stat.exists
      tags: anaconda-install
  tasks: 
    - name: "link anaconda..."
      become: yes
      become_user: root
      file:
        dest: /opt/anaconda
        src: "{{ anaconda3_path }}"
        state: link
      tags:
        - anaconda-install
    - name: "Set up python 3.6"
      become: yes
      shell: "/opt/anaconda/bin/conda install -y -q python=3.6.2"
      register: conda_env_update
      changed_when: '"COMPLETE" in conda_env_update.stdout'

- name: "Build and install caffe-1.0 from source"
  hosts: gpu
  become: true
  tasks:
    - name: "Check if caffe is present"
      shell: |
        test -L /opt/caffe/bin/caffe && \
        test -f /opt/caffe/bin/caffe.bin && \
        test "$(/opt/caffe/bin/caffe --version)" = "caffe version 1.0.0"
      register: caffe_check
      failed_when: caffe_check.rc > 1
      changed_when: caffe_check.rc == 1

    - name: "Create temp build directory"
      file: path=/tmp/ansible-caffe-build state=directory
      when: caffe_check.rc == 1

    - name: "Download caffe-1.0 sources"
      unarchive:
        # src: "https://github.com/BVLC/caffe/archive/1.0.tar.gz"
        # remote_src: yes
        src: largefiles/caffe/1.0.tar.gz
        dest: /tmp/ansible-caffe-build
      when: caffe_check.rc == 1

    - name: "Copy our caffe Makefile.config"
      copy:
        dest: /tmp/ansible-caffe-build/caffe-1.0/Makefile.config
        src: files/caffe/Makefile.config
      when: caffe_check.rc == 1

    - name: "Clear target caffe directory"
      file: name=/opt/caffe state=absent
      when: caffe_check.rc == 1

    - name: "Build and install caffe-1.0"
      shell: |
        make clean
        make proto
        make all -j12
        make distribute
        ls distribute/bin | \
          sed -n 's/\.bin$//p' | \
          xargs -n1 -I{} ln -s {}.bin distribute/bin/{}
        mkdir -p /opt/caffe
        mv distribute/* /opt/caffe
        ln -s /opt/caffe/python/caffe -t /usr/local/lib/python2.7/dist-packages
        ln -s /opt/caffe/lib/libcaffe.* -t /usr/local/lib/
        echo "caffe build complete"
      args:
        chdir: /tmp/ansible-caffe-build/caffe-1.0
      register: caffe_build
      failed_when: caffe_build.rc > 0
      changed_when: '"caffe build complete" in caffe_build.stdout'
      notify: run ldconfig
      when: caffe_check.rc == 1

    - name: "Verify that caffe is present"
      shell: |
        test -L /opt/caffe/bin/caffe && \
        test -f /opt/caffe/bin/caffe.bin && \
        test "$(/opt/caffe/bin/caffe --version)" = "caffe version 1.0.0"
      register: caffe_verify
      failed_when: caffe_verify.rc > 1
      changed_when: caffe_verify.rc == 1

  handlers:
    - name: run ldconfig
      command: ldconfig

- name: "Set up common login environment variables"
  hosts: gpu
  become: true
  tasks:
    - name: "Copy profile.local"
      copy:
        dest: /etc/profile.local
        src: files/profile.local

- name: "Setup docker"
  hosts: docker
  become: yes
  tasks:
    - name: "Installs docker"
      apt: name=docker install_recommends=yes
